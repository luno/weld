//go:build !dev

package state

// Code generated by weld. DO NOT EDIT.

import (
	"example/exchange"
	exchange_db "example/exchange/db"
	exchange_ops "example/exchange/ops"
	"example/external/versioned"
	versioned_v1 "example/external/versioned/v1"
	"example/identity/email"
	email_client_grpc "example/identity/email/client/grpc"
	"example/identity/users"
	users_client_grpc "example/identity/users/client/grpc"

	"github.com/luno/jettison/errors"
)

func MakeBackends() (exchange_ops.Backends, error) {
	var (
		b   backendsImpl
		err error
	)

	b.email, err = email_client_grpc.New()
	if err != nil {
		return nil, errors.Wrap(err, "email client grpc new")
	}

	b.exchangeDB, err = exchange_db.Connect()
	if err != nil {
		return nil, errors.Wrap(err, "exchange db connect")
	}

	b.modelChan = NewModelChan()

	b.users, err = users_client_grpc.New()
	if err != nil {
		return nil, errors.Wrap(err, "users client grpc new")
	}

	b.versioned = versioned.New()

	return &b, nil
}

type backendsImpl struct {
	email      email.Client
	exchangeDB *exchange_db.ExchangeDB
	modelChan  chan<- exchange.Model
	users      users.Client
	versioned  *versioned_v1.Service
}

func (b *backendsImpl) Email() email.Client {
	return b.email
}

func (b *backendsImpl) ExchangeDB() *exchange_db.ExchangeDB {
	return b.exchangeDB
}

func (b *backendsImpl) ModelChan() chan<- exchange.Model {
	return b.modelChan
}

func (b *backendsImpl) Users() users.Client {
	return b.users
}

func (b *backendsImpl) Versioned() *versioned_v1.Service {
	return b.versioned
}
