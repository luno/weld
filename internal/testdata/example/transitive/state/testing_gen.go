//go:build !dev

package state

// Code generated by weld. DO NOT EDIT.

import (
	transitive_ops "example/transitive/ops"
	"testing"
)

func NewTestingBackends(b Backends) *TestingBackends {
	return &TestingBackends{
		Backends: b,
	}
}

type TestingBackends struct {
	Backends

	foo transitive_ops.Foo
	qux transitive_ops.Qux
	bar transitive_ops.Bar
	baz transitive_ops.Baz
}

func (ti *TestingBackends) Foo() transitive_ops.Foo {
	if ti.foo != nil {
		return ti.foo
	}

	return ti.Backends.Foo()
}

func (ti *TestingBackends) Qux() transitive_ops.Qux {
	if ti.qux != nil {
		return ti.qux
	}

	return ti.Backends.Qux()
}

func (ti *TestingBackends) Bar() transitive_ops.Bar {
	if ti.bar != nil {
		return ti.bar
	}

	return ti.Backends.Bar()
}

func (ti *TestingBackends) Baz() transitive_ops.Baz {
	if ti.baz != nil {
		return ti.baz
	}

	return ti.Backends.Baz()
}

// SetFooForTesting is a runtime available override for the "foo" dependency that should only be used for testing.
func (ti *TestingBackends) SetFooForTesting(t *testing.T, foo transitive_ops.Foo) {
	t.Cleanup(func() {
		ti.foo = nil
	})

	ti.foo = foo
}

// SetQuxForTesting is a runtime available override for the "qux" dependency that should only be used for testing.
func (ti *TestingBackends) SetQuxForTesting(t *testing.T, qux transitive_ops.Qux) {
	t.Cleanup(func() {
		ti.qux = nil
	})

	ti.qux = qux
}

// SetBarForTesting is a runtime available override for the "bar" dependency that should only be used for testing.
func (ti *TestingBackends) SetBarForTesting(t *testing.T, bar transitive_ops.Bar) {
	t.Cleanup(func() {
		ti.bar = nil
	})

	ti.bar = bar
}

// SetBazForTesting is a runtime available override for the "baz" dependency that should only be used for testing.
func (ti *TestingBackends) SetBazForTesting(t *testing.T, baz transitive_ops.Baz) {
	t.Cleanup(func() {
		ti.baz = nil
	})

	ti.baz = baz
}
