package: devstate
tags: ""
backendstype: exchange_ops.Backends
backendsname: Backends
imports:
  example/exchange:
    name: exchange
    pkgpath: example/exchange
    aliased: false
  example/exchange/db:
    name: exchange_db
    pkgpath: example/exchange/db
    aliased: true
  example/exchange/ops:
    name: exchange_ops
    pkgpath: example/exchange/ops
    aliased: true
  example/exchange/state:
    name: exchange_state
    pkgpath: example/exchange/state
    aliased: true
  example/external/versioned:
    name: versioned
    pkgpath: example/external/versioned
    aliased: false
  example/external/versioned/v1:
    name: versioned_v1
    pkgpath: example/external/versioned/v1
    aliased: true
  example/identity/email:
    name: email
    pkgpath: example/identity/email
    aliased: false
  example/identity/email/client/dev:
    name: email_client_dev
    pkgpath: example/identity/email/client/dev
    aliased: true
  example/identity/email/client/logical:
    name: email_client_logical
    pkgpath: example/identity/email/client/logical
    aliased: true
  example/identity/email/db:
    name: email_db
    pkgpath: example/identity/email/db
    aliased: true
  example/identity/users:
    name: users
    pkgpath: example/identity/users
    aliased: false
  example/identity/users/client/dev:
    name: users_client_dev
    pkgpath: example/identity/users/client/dev
    aliased: true
  example/identity/users/client/logical:
    name: users_client_logical
    pkgpath: example/identity/users/client/logical
    aliased: true
  example/identity/users/db:
    name: users_db
    pkgpath: example/identity/users/db
    aliased: true
params: []
deps:
- type: email.Client
  var: email
  getter: Email
  isduplicate: false
  provider:
    funcpkg: email_client_dev
    funcname: Make
    returnserr: true
    params:
    - '&b'
    errwrapmsg: email client dev make
- type: '*email_db.EmailDB'
  var: emailDB
  getter: EmailDB
  isduplicate: false
  provider:
    funcpkg: email_db
    funcname: Connect
    returnserr: true
    params: []
    errwrapmsg: email db connect
- type: '*exchange_db.ExchangeDB'
  var: exchangeDB
  getter: ExchangeDB
  isduplicate: false
  provider:
    funcpkg: exchange_db
    funcname: Connect
    returnserr: true
    params: []
    errwrapmsg: exchange db connect
- type: chan<- exchange.Model
  var: modelChan
  getter: ModelChan
  isduplicate: false
  provider:
    funcpkg: exchange_state
    funcname: NewModelChan
    returnserr: false
    params: []
    errwrapmsg: exchange state new model chan
- type: users.Client
  var: users
  getter: Users
  isduplicate: false
  provider:
    funcpkg: users_client_dev
    funcname: Make
    returnserr: true
    params:
    - '&b'
    errwrapmsg: users client dev make
- type: '*users_db.UsersDB'
  var: usersDB
  getter: UsersDB
  isduplicate: false
  provider:
    funcpkg: users_db
    funcname: Connect
    returnserr: true
    params: []
    errwrapmsg: users db connect
- type: '*versioned_v1.Service'
  var: versioned
  getter: Versioned
  isduplicate: false
  provider:
    funcpkg: versioned
    funcname: New
    returnserr: false
    params: []
    errwrapmsg: versioned new
transbcks:
- email_client_logical.Backends
- users_client_logical.Backends
